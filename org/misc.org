# -*- coding: utf-8 -*-
#+TAGS: DEPRECATED

* manual
** 安装当前所有选中的package
   1. pacakge-install-selected-packages
** 其中需要安装服务器的有
   1. (Python)jedi:install-server
   2. (clang)irony-install-server
      － 需要libclang的支持，这里需要从源码编译安装才能符合irony-server的相关编译需求
** 配置环境变量
   1. ORG_ROOT 指向目前使用的org目录，所有org capture的内容都会添加到这个目录下面
   2. ORG_WORK_ROOT 指向当前工作相关的org目录
** 需要注意的是
   当init.el中的，selected-package变量的值可能不能正确的表达，这不分可能需要手动的处理
** UnrealEngine
#+BEGIN_SRC bat :results value
set LDFLAGS="-fuse-ld=lld-link"
cmake -H. -G "Unix Makefiles" -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_C_COMPILER:PATH="D:\\Program Files\\LLVM\\bin\\clang.exe" -DCMAKE_CXX_COMPILER:PATH="D:\\Program Files\\LLVM\\bin\\clang++.exe" -DCMAKE_C_COMPILER_ID="Clang" -DCMAKE_CXX_COMPILER_ID="Clang" -DCMAKE_SYSTEM_NAME="Generic" ..
#+END_SRC
* path
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp")
  #+END_SRC
* pacakge
  #+BEGIN_SRC emacs-lisp
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
					  (not (gnutls-available-p))))
		 (proto (if no-ssl "http" "https")))
	(when no-ssl
	  (warn "\
  Your version of Emacs does not support SSL connections,
  which is unsafe because it allows man-in-the-middle attacks.
  There are two things you can do about this warning:
  1. Install an Emacs version that does support SSL and be safe.
  2. Remove this warning from your init file so you won't see it again."))
	;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
	(add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
	;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
	(when (< emacs-major-version 24)
	  ;; For important compatibility libraries like cl-lib
	  (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))

  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (custom-set-variables
   '(gnutls-algorithm-priority "normal:-vers-tls1.3"))
  (package-initialize)
  ;; use domestic source
  (setq package-archives '(("gnu"   . "http://elpa.emacs-china.org/gnu/")
						   ("melpa" . "http://elpa.emacs-china.org/melpa/")))

  #+END_SRC
* misc configs
  #+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq
   large-file-warning-threshold 1000000
   scroll-conservatively 10
   scroll-margin 7
   )

  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  (setq buffer-file-coding-system 'utf-8)
  (setq make-backup-files nil)
  (setq create-lockfiles nil)

  ;; disable annoying beeeeep !!!
  (setq visible-bell nil ring-bell-function (lambda ()))
  #+END_SRC
* modes
  #+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (toggle-scroll-bar 0)
  (line-number-mode)
  (column-number-mode)
  (global-visual-line-mode 0)
  (global-linum-mode 0)

  ;; 让一些插件可以支持语法相关的内容
  (semantic-mode t)
  #+END_SRC
* key binding
 #+BEGIN_SRC emacs-lisp
 ;; personal short-cuts
 (global-set-key (kbd "<f4>") 'flycheck-mode)
 (global-set-key (kbd "<f9>") 'ykdu-shell-command)

 (global-set-key (kbd "M-p") 'backward-paragraph)
 (global-set-key (kbd "M-n") 'forward-paragraph)
 (global-set-key (kbd "C-o") 'newline-and-indent)

 (progn
   (global-set-key (kbd "C-c k") 'key-command-prefix)
   (define-prefix-command 'key-command-prefix)

   (define-key key-command-prefix (kbd "j") 'windmove-down)
   (define-key key-command-prefix (kbd "k") 'windmove-up)
   (define-key key-command-prefix (kbd "h") 'windmove-left)
   (define-key key-command-prefix (kbd "l") 'windmove-right)
   )

 (progn
   (global-set-key (kbd "C-;") 'ykdu-major-map)
   (define-prefix-command 'ykdu-major-map)

   (define-key ykdu-major-map (kbd "f") 'find-name-dired)
   (define-key ykdu-major-map (kbd "F") 'projectile-find-file)
   (define-key ykdu-major-map (kbd "g") 'rg-thing-at-point)
   (define-key ykdu-major-map (kbd "G") 'rg-thing-at-point-default)

   (define-key ykdu-major-map (kbd "1") 'flycheck-list-errors)

   (define-key ykdu-major-map (kbd "e") 'open-fold)
   (define-key ykdu-major-map (kbd "b") 'pop-tag-mark)

   (define-key ykdu-major-map (kbd "s") 'store-cur-file-name)
   )

 (global-set-key (kbd "C-M-.") 'xref-find-apropos-at-point)
 #+END_SRC
* function
 #+BEGIN_SRC emacs-lisp
 (defun ykdu-command (command-buffer)
   "Run shell command and output to given buffer"
   (let* ((output-buffer command-buffer)
          (error-buffer output-buffer))

     (setq compile_command (read-string "Shell Command: "))
     (get-buffer-create output-buffer)
     (get-buffer-create error-buffer)
     (kill-buffer output-buffer-name)
     ;;    (shell-command s_command output-buffer error-buffer)
     (switch-to-buffer-other-window output-buffer)
     (with-current-buffer output-buffer
       (read-only-mode -1)
       (kill-region (point-min) (point-max))
       (insert "Process Begins !!!!\n")
       (insert (format-time-string "%F %H:%M:%S(%3N)"))
       (insert "\n=====================================\n\n")
       (let* ((command_result (shell-command-to-string compile_command)))
         (insert (decode-coding-string command_result 'gbk)))
       (insert "\n=====================================\n")
       (insert "Process Finished !!!!\n")
       (insert (format-time-string "%Y-%m-%d %H:%M:%S(%3N)"))
       (compilation-mode)
       (beginning-of-buffer)
       )
     ;; back to previous window
     (other-window -1)
     )
   )

 (defun ykdu-shell-command ()
   (interactive)
   (let (
         (bf-name (buffer-file-name))
         (output-buffer-name "*ykdu-shell*")
         )
     (let (
           (default-directory (if (not bf-name) "~" (file-name-directory bf-name)))
           )
       (ykdu-command output-buffer-name)
       )
     )
   )

 ;; (defun workspace-coding-set (coding)
 ;;   (interactive "zCoding: ")
 ;;   "set defualt coding systems and prefer coding system at once"
 ;;   (set-default-coding-systems coding)
 ;;   ;; (locale-coding-system coding)
 ;;   (prefer-coding-system coding)
 ;;   )

 (defun open-fold (path)
   "update for mf client"
   (interactive "Dstart from: ")
   (message (concat "start \"" path "\""))
   (browse-url-of-file path)
   )

 (defun save-dir-path (path)
   (interactive "Dcopy: ")
   ;; (message (concat "start " path))
   (kill-new path)
   )

 (defun copy-cur-dir-path (path)
   (interactive "Dcopy from: ")
   ;; (message (concat "start " path))
   (kill-new path)
   )

 (defun store-cur-file-name ()
   (interactive)
   (kill-new (file-name-nondirectory buffer-file-name))
   )

 (setq rg-ykuun-args '("--fixed-strings" "-i" "--vimgrep" "-t cpp" "-t lua" "-t config" "-t txt" "-t lisp" "-t org" "-t cs" "-t json"))

 (defun rg-thing-at-point-default (search-term &optional arg)
   (interactive
    (list
     (read-from-minibuffer (format "Default Ripgrep %ssearch for: "
                                   (if current-prefix-arg
                                       "regexp "
                                     ""))
                           (projectile-symbol-or-selection-at-point))
     current-prefix-arg))
   (ripgrep-regexp search-term default-directory rg-ykuun-args)
   )

 (defun rg-thing-at-point (search-term &optional arg)
   (interactive
    (list
     (read-from-minibuffer (format "Ripgrep %ssearch for: "
                                   (if current-prefix-arg
                                       "regexp "
                                     ""))
                           (projectile-symbol-or-selection-at-point))
     current-prefix-arg))
   (if (projectile-project-root)
       (progn
         (ripgrep-regexp search-term (projectile-project-root) rg-ykuun-args)
         )
     (message "default root do ripgrep")
     (ripgrep-regexp search-term default-directory rg-ykuun-args)
     )
   )

 (require 'projectile)			; add this line to enable projectile-symbol-or-selection-at-point function

 (defun xref-find-apropos-at-point (search-term &optional arg)
   (interactive
    (list
     (read-from-minibuffer (format "xref find apropos %ssearch for: "
                                   (if current-prefix-arg
                                       "regexp "
                                     ""))
                           (projectile-symbol-or-selection-at-point))
     current-prefix-arg))
   (xref-find-apropos search-term)
   )

 ;; (defun add-cur-tags-in-dir-root-to-tags-table-list (current-root-dir)
 ;;   (interactive (list (read-directory-name "DirRootForTags: " (projectile-project-root))))
 ;;   (message (concat current-root-dir "/"))
 ;;   (if (file-readable-p (concat current-root-dir "tags-c")) 
 ;;       (add-to-list 'tags-table-list (concat current-root-dir "tags-c")) nil)
 ;;   (if (file-readable-p (concat current-root-dir "tags-lua")) 
 ;;       (add-to-list 'tags-table-list (concat current-root-dir "tags-lua")) nil)
 ;;   (if (file-readable-p (concat current-root-dir "tags-cpp")) 
 ;;       (add-to-list 'tags-table-list (concat current-root-dir "tags-cpp")) nil)
 ;;   )
 #+END_SRC
* recentf
#+BEGIN_SRC emacs-lisp
(recentf-mode t)
(setq
 recentf-max-menu-items 400
 recentf-max-saved-items nil
 )
#+END_SRC
* C\CPP
#+BEGIN_SRC emacs-lisp
(setq-default c++-tab-always-indent t)
(setq-default c-default-style "awk")
(setq-default c-basic-offset 4)
(setq-default c-indent-level 4)
(setq-default tab-width 4)
(setq-default indent-tabs-mode t)

(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

;; (c-set-offset 'cpp-macro -1000)
;; (c-set-offset 'case-label 4)
;; (c-set-offset 'substatement-open 0)
;; (c-set-offset 'substatement-close 0)
;; (c-set-offset 'label 0)
;; (c-set-offset 'arglist-intro 4)
;; (c-set-offset 'statement-block-intro 4)
;; (c-set-offset 'arglist-close 4)
;; (c-set-offset 'statement-cont 0)
;; (c-set-offset 'label 0)
#+END_SRC
* Lua
  #+BEGIN_SRC emacs-lisp
  (setq-default lua-indent-level 4)
  #+END_SRC
* Python
  #+BEGIN_SRC emacs-lisp
  ;; Python
  (setq-default python-indent-offset 4)
  #+END_SRC
* encoding
  #+BEGIN_SRC emacs-lisp
  (define-coding-system-alias 'GB18030 'gb18030)
  (define-coding-system-alias 'utf8 'utf-8-unix)
  #+END_SRC
* version control
  #+BEGIN_SRC emacs-lisp
  (remove-hook 'find-file-hook 'vc-refresh-state)
  ;; (setq jit-lock-defer-time 0.01)
  ;; (setq font-lock-support-mode 'fast-lock-mode)
  ;; magit receiving gbk from git.exe
  (setq magit-git-output-coding-system 'utf-8)
  ;; (setq magit-git-output-coding-system 'chinese-gbk)
  ;; 强制设置commit editmsg的编码
  (modify-coding-system-alist 'file "\.git/COMMIT_EDITMSG" 'utf-8)
  (global-set-key (kbd "C-x g") 'magit-status)
  #+END_SRC
* optimization
  #+BEGIN_SRC emacs-lisp
  ;; chinese character is using a big font lib which will trigger the GC on every movement
  (setq inhibit-compacting-font-caches t)
  #+END_SRC
* pyim
  #+BEGIN_SRC emacs-lisp
  ;; input method
  (require 'pyim)
  (require 'pyim-basedict)
  (pyim-basedict-enable)
  (setq default-input-method "pyim")
  (setq pyim-default-scheme 'microsoft-shuangpin)
  (setq pyim-page-tooltip 'popup)
  (setq pyim-page-length 9)
  #+END_SRC
* color
  #+BEGIN_SRC emacs-lisp
  (load-theme 'tango-dark t)
  (require 'highlight-indentation)
  ;; (set-face-background 'highlight-indentation-face "#e3e3d3")
  ;; (set-face-background 'highlight-indentation-current-column-face "#c3b3b3")
  #+END_SRC
* grep
#+BEGIN_SRC emacs-lisp
(setq grep-command "rg --vimgrep -i -t cpp -t lua -t cs -t c -t config -t txt ")
#+END_SRC
* org mode
#+BEGIN_SRC emacs-lisp
(setq
 org-agenda-files nil
 org-tags-column -90
 org-src-tab-acts-natively t
 org-edit-src-content-indentation 0
 )

(require 'org-protocol)
(require 'edit-server)
(require 'server)

(defun server-ensure-safe-dir (dir) "Noop" t) ; 非常烦人的一个错误，直接将相关的函数置空

(server-start)				; 注意需要手动创建文件夹
(edit-server-start)
(setq edit-server-new-frame nil)

;; babel 这个地方不添加将会导致相关的babel无法被加载
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (python . t)
   (matlab . t)
   (emacs-lisp . t)
   (lua . t)
   (shell . t)
   ;; (C . t)
   ))

;; (setq 
;;  org-babel-C++-compiler "clang++"
;;  org-babel-C-compiler "clang"
;;  )

(org-indent-mode)
(org-display-inline-images t t)
(setq org-todo-keywords
      '((sequence "TODO" "DOING" "ARCHIVE" "|" "DONE" "ABORT" "SUSPENDED")))
(setq org-agenda-inhibit-startup t)
(setq org-startup-indented t)

;; VAR
(message (concat "SET ORG ROOT TO " (getenv "ORG_ROOT")))
(message (concat "SET ORG WORK ROOT TO " (getenv "ORG_WORK_ROOT")))
(setq org-directory (getenv "ORG_ROOT"))
;; (add-hook 'after-init-hook '(lambda () (org-todo-list) (get-buffer "*Org Agenda*")))
;; .\emacsclientw.exe "org-protocol:///capture?template=w&url=http%3a%2f%2fduckduckgo%2ecom&title=DuckDuckGo"
(setq org-work-daily (concat (getenv "ORG_WORK_ROOT") "/daily.org"))
(setq org-incomming-work (concat (getenv "ORG_WORK_ROOT") "/incoming_work.org"))
(setq org-capture-templates
      '(
        ("t" "Todo" entry (file+headline "inbox.org" "Incomming")
         "* TODO %?\n %T\n %i\n %a")
        ("w" "Website with Tags" entry (file+headline "sites.org" "Regular Visit Sites")
         "* %:description %?\t%^g\nLINK: %:annotation\nCaptured On: %U")
        ("W" "Website" entry (file+headline "sites.org" "Regular Visit Sites")
         "* %:description %?\t\nLINK: %:annotation\nCapured On: %U")
        ("R" "Website ToRead" entry (file+headline "sites.org" "Sites ToRead")
         "* TOREAD %:description %?\t%^g\nLINK: %:annotation\nCapured On: %U")
        ("d" "Daily Recording" entry (file+datetree "daily.org")
         "* %?\n %i\n %a" :tree-type week)
        ("r" "Tools and Refers" entry (file+headline "refers.org" "Tools & Refers")
         "* %:description %?\t\nLINK: %:annotation\n%U")
        ("l" "DO IT WHILE ALIVE" entry (file+headline "life.org" "LIFE MOVES ON")
         "* PLAN %?\n %a\n %T\n %i\n")
        ("D" "Work Daily Recording" entry (file+datetree org-work-daily "Daily Records")
         "* %?\n %i\n %a" :tree-type week)
        ("T" "Work TAPD Recording" entry (file+olp+datetree org-work-daily "TAPD Records")
         "* %?\n %i\n %a" :tree-type week)
        ("i" "Incoming Works" entry (file+headline org-incomming-work "Looks Good To Me!!!!")
         "* TODO %?\n %a\n %T\n %i\n")
        )
      )

;; KEY BINDING
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c C-l") 'org-insert-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC
* lsp mode                                                                    :DEPRECATED:
#+BEGIN_SRC emacs-lisp
(require 'lsp)
(require 'lsp-ui)

;; (add-hook 'c++-mode-hook 'lsp)
;; (add-hook 'c-mode-hook 'lsp)
;; ;; (setq lsp-clients-clangd-executable "D:/workspace/thirdparty bin/llvm-project/build/Release/bin/clangd.exe")
;; (require 'ccls)
;; (add-hook 'c++-mode-hook (lambda () (require 'ccls) (lsp)))
;; (add-hook 'c-mode-hook (lambda () (require 'ccls) (lsp)))

;; (setq-default lsp-file-watch-threshold 200000)
;; (setq lsp-clients-clangd-args '("-j=4" "-background-index" "-log=error"))
#+END_SRC
* eglot                                                                       :DEPRECATED:
  #+BEGIN_SRC emacs-lisp
    ;; (add-hook 'c-mode-hook 'eglot-ensure)
    ;; (add-hook 'c++-mode-hook 'eglot-ensure)
  ;; (require 'eglot)
  ;; (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
  ;; (add-hook 'c-mode-hook 'eglot-ensure)
  ;; (add-hook 'c++-mode-hook 'eglot-ensure)
  #+END_SRC
* company                                                                     :DEPRECATED:
  #+BEGIN_SRC emacs-lisp
  ;; (require 'company-lsp)
  ;; (push 'company-lsp company-backends)
  ;; (push 'company-c-headers company-backends)

  ;; (global-company-mode 0)

  ;; (eval-after-load 'company
  ;;   '(add-to-list 'company-backends 'company-irony))

  ;; (require 'company-irony-c-headers)
  ;; ;; Load with `irony-mode` as a grouped backend
  ;; (eval-after-load 'company
  ;;   '(add-to-list
  ;;     'company-backends '(company-irony-c-headers company-irony)))

  ;; ;; 安装完成jedi之后需要pip安装相关的包jedi以及epc，然后执行jedi:install-server
  ;; ;; Advanced usage.
  ;; (add-to-list 'company-backends '(company-jedi company-files))

  ;; ;; key bindings,
  ;; ;; (global-set-key (kbd "M-/") 'company-complete)
  ;; (global-set-key (kbd "C-M-/") 'company-complete)
  #+END_SRC
* yasnippet
  #+BEGIN_SRC emacs-lisp
  (yas-global-mode t)
  #+END_SRC
* helm                                                                        :DEPRECATED:
  #+BEGIN_SRC emacs-lisp
  ;; (require 'helm)
  ;; (require 'helm-xref)
  ;; (require 'helm-rg)

  ;; (progn
  ;;   (helm-autoresize-mode t)
  ;;   (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
  ;;         helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
  ;;         helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
  ;;         helm-ff-file-name-history-use-recentf t
  ;;         helm-echo-input-in-header-line t
  ;;         )

  ;;   (setq helm-semantic-fuzzy-match t
  ;;         helm-imenu-fuzzy-match t
  ;;         )

  ;;   ;; (setq helm-grep-default-command "rg --vimgrep -E gb18030 -t %e %p %f"
  ;;   ;;       helm-grep-default-recurse-command "rg --vimgrep -E gb18030 -t %e %p %f")
  ;;   )

  ;; ;; helm function key bindings
  ;; (progn
  ;;   (global-set-key (kbd "C-c h") 'helm-command-prefix)
  ;;   (define-prefix-command 'helm-command-prefix)
  ;;   (global-unset-key (kbd "C-x c"))
  ;;   (define-key helm-command-prefix (kbd "o") 'helm-occur)
  ;;   (define-key helm-command-prefix (kbd "r") 'helm-recentf)
  ;;   (define-key helm-command-prefix (kbd "i") 'helm-imenu)
  ;;   ;; (define-key helm-command-prefix (kbd "t") (lambda ()
  ;;   ;; 					      (interactive)
  ;;   ;; 					      (helm-gtags-find-tag (thing-at-point 'word))
  ;;   ;; 					      )
  ;;   ;;   )

  ;;   (define-key helm-map (kbd "TAB") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  ;;   (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
  ;;   (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

  ;;   (global-set-key (kbd "M-x") 'helm-M-x)
  ;;   (global-set-key (kbd "C-x C-f") 'helm-find-files)
  ;;   (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
  ;;   (global-set-key (kbd "C-x b") 'helm-mini)
  ;;   )
  #+END_SRC
* ivy counsel swiper
#+BEGIN_SRC emacs-lisp
(require 'ivy-xref)
(require 'ivy-explorer)

(ivy-mode t)
(counsel-mode t)
(ivy-explorer-mode t)
(setq ivy-use-virtual-buffers t)

(when (>= emacs-major-version 27)
  (setq xref-show-definitions-function #'ivy-xref-show-defs))
(setq xref-show-xrefs-function #'ivy-xref-show-xrefs)

;; function

(defun resume-ivy-with-prefix-arg ()
  (interactive)
  (setq current-prefix-arg '(4))		; C-u prefix command
  (ivy-resume)
  )

(progn
  (global-set-key (kbd "C-c i") 'ivy-command-prefix)
  (define-prefix-command 'ivy-command-prefix)

  (define-key ivy-command-prefix (kbd "s") 'swiper-isearch-thing-at-point)
  (define-key ivy-command-prefix (kbd "r") 'counsel-recentf)
  (define-key ivy-command-prefix (kbd "i") 'counsel-imenu)
  (define-key ivy-command-prefix (kbd "C-r") 'resume-ivy-with-prefix-arg)
  )


#+END_SRC
* flycheck
#+BEGIN_SRC emacs-lisp
;; enable static analysis
(with-eval-after-load 'flycheck
  (require 'flycheck-clang-analyzer)
  (flycheck-clang-analyzer-setup))
#+END_SRC
* irony                                                                       :DEPRECATED:
  #+BEGIN_SRC emacs-lisp
  ;; (add-hook 'c++-mode-hook 'irony-mode)
  ;; (add-hook 'c-mode-hook 'irony-mode)
  ;; (add-hook 'objc-mode-hook 'irony-mode)
  ;; (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
  #+END_SRC
* projectile
#+BEGIN_SRC emacs-lisp
(projectile-mode t)
(setq projectile-indexing-method 'native)
(setq projectile-enable-caching t)
(setq projectile-require-project-root nil)
(setq projectile-completion-system 'ivy)
#+END_SRC
* clang-format
  #+BEGIN_SRC emacs-lisp
  (require 'clang-format)
  #+END_SRC
* expand region
  [[https://github.com/magnars/expand-region.el][magnars/expand-region.el: Emacs extension to increase selected region by semantic units.]]
  If you expand too far, you can contract the region by pressing - (minus key), or by prefixing the shortcut you defined with a negative argument: C-- C-=.
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-=") 'er/expand-region)
  #+END_SRC
* Async Shell
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'display-buffer-alist
			   (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
  #+END_SRC
* Code Navigation
#+BEGIN_SRC emacs-lisp
;; (defalias 'xref-find-definitions 'counsel-etags-find-tag-at-point)
;; (defalias 'xref-find-apropos-at-point 'counsel-etags-grep)
#+END_SRC
* Appendix
  #+BEGIN_SRC shell
  ;; (async-shell-command "ctags -e --if0=yes --c-kinds=+px --c++-kinds=+px --extra=+q --fields=+iaS --languages=c -R -f tags-c")
  ;; (async-shell-command "ctags -e --if0=yes --c-kinds=+px --c++-kinds=+px --extra=+q --fields=+iaS --languages=c++ -R -f tags-cpp")
  ;; (async-shell-command "ctags -e --if0=yes --c-kinds=+px --c++-kinds=+px --extra=+q --fields=+iaS --languages=lua -R -f tags-lua")
  #+END_SRC
